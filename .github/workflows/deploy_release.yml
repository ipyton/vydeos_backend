name: Deploy Java Apps to Oracle Linux on release push
on:
  push:
    branches:
      - release
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # ---------- Build Notification ----------
      - name: Build Notification
        working-directory: ./Notification
        run: mvn clean package -DskipTests

      # ---------- Upload Notification JAR ----------
      - name: Upload Notification JAR to Oracle Linux
        uses: appleboy/scp-action@v0.1.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          port: 50022
          username: root
          key: ${{ secrets.SERVER_SSH_KEY }}
          source: "Notification/target/*.jar"
          target: "~/notification"
          strip_components: 2  # Remove Notification/target/ prefix
          timeout: 180s              # 3 minutes timeout
          command_timeout: 300s      # 5 minutes command timeout
          debug: true                # Enable debug mode
          overwrite: true            # Overwrite existing files

      # ---------- Restart Notification Service ----------
      - name: Restart Notification Java App
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: root
          port: 50022 
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            echo "========================================="
            echo "🚀 NOTIFICATION SERVICE DEPLOYMENT START"
            echo "========================================="
            echo "📅 Deployment Time: $(date)"
            echo "📂 Working Directory: $(pwd)"
            
            cd ~/notification
            echo "📁 Current directory: $(pwd)"
            
            echo ""
            echo "🔍 STEP 1: Stopping existing Notification service..."
            echo "----------------------------------------"
            existing_pids=$(pgrep -f "java -jar .*$(pwd)" || true)
            if [ -n "$existing_pids" ]; then
              echo "Found existing processes: $existing_pids"
              echo "$existing_pids" | while read pid; do
                echo "🛑 Stopping process $pid..."
                kill -15 "$pid" 2>/dev/null || kill -9 "$pid" 2>/dev/null
                sleep 2
                if kill -0 "$pid" 2>/dev/null; then
                  echo "❌ Process $pid still running, force killing..."
                  kill -9 "$pid" 2>/dev/null || true
                else
                  echo "✅ Process $pid stopped successfully"
                fi
              done
              echo "⏳ Waiting 3 seconds for cleanup..."
              sleep 3
            else
              echo "ℹ️  No existing Notification processes found"
            fi
            
            echo ""
            echo "🔍 STEP 2: Locating JAR files..."
            echo "----------------------------------------"
            echo "📋 Available JAR files:"
            ls -la *.jar 2>/dev/null || echo "❌ No JAR files found"
            
            latest_jar=$(ls -t *.jar 2>/dev/null | head -n 1)
            if [ -z "$latest_jar" ]; then
              echo "❌ ERROR: No JAR file found in $(pwd)"
              echo "📂 Directory contents:"
              ls -la
              exit 1
            fi
            
            echo "🎯 Selected JAR: $latest_jar"
            echo "📊 JAR file info:"
            ls -lh "$latest_jar"
            
            echo ""
            echo "🔍 STEP 3: Creating symlink..."
            echo "----------------------------------------"
            echo "🔗 Creating symlink: $(pwd)/app.jar -> $(pwd)/$latest_jar"
            ln -sf "$(pwd)/$latest_jar" "$(pwd)/app.jar"
            ls -la app.jar
            
            echo ""
            echo "🔍 STEP 4: Starting Notification service..."
            echo "----------------------------------------"
            echo "🚀 Command: java -jar $(pwd)/app.jar --spring.profiles.active=dispatcher"
            echo "📝 Log file: $(pwd)/app.log"
            
            # Clear previous log
            > app.log
            
            # Start the application
            nohup java -jar "$(pwd)/app.jar" --spring.profiles.active=dispatcher > app.log 2>&1 &
            app_pid=$!
            echo "🆔 Started with PID: $app_pid"
            
            echo ""
            echo "🔍 STEP 5: Monitoring startup..."
            echo "----------------------------------------"
            echo "⏳ Waiting for application to start (monitoring for 30 seconds)..."
            
            for i in {1..30}; do
              echo "⏱️  Checking startup progress ($i/30)..."
            
              # Check if process is still running
              if ! kill -0 $app_pid 2>/dev/null; then
                echo "❌ Process died during startup!"
                echo "📋 Last 50 lines of log:"
                tail -n 50 app.log
                exit 1
              fi
            
              # Check for startup indicators in log
              if grep -q "Started.*Application" app.log 2>/dev/null; then
                echo "✅ Application started successfully!"
                break
              elif grep -q "APPLICATION FAILED TO START" app.log 2>/dev/null; then
                echo "❌ Application failed to start!"
                echo "📋 Error logs:"
                tail -n 30 app.log
                exit 1
              elif grep -q "Tomcat started on port" app.log 2>/dev/null; then
                echo "✅ Tomcat server started!"
                break
              fi
            
              sleep 1
            done
            
            echo ""
            echo "🔍 STEP 6: Final verification..."
            echo "----------------------------------------"
            
            # Final process check
            if pgrep -f "java -jar.*$(pwd)/app.jar" > /dev/null; then
              final_pid=$(pgrep -f "java -jar.*$(pwd)/app.jar")
              echo "✅ Notification service is running (PID: $final_pid)"
            
              # Show memory usage
              echo "💾 Memory usage:"
              ps -p $final_pid -o pid,ppid,pcpu,pmem,cmd --no-headers || true
            
              # Show recent log entries
              echo ""
              echo "📋 Recent log entries (last 10 lines):"
              tail -n 10 app.log
            
            else
              echo "❌ DEPLOYMENT FAILED: Notification service is not running"
              echo "📋 Full log output:"
              cat app.log
              exit 1
            fi
            
            echo ""
            echo "========================================="
            echo "✅ NOTIFICATION SERVICE DEPLOYED SUCCESSFULLY"
            echo "📝 Full logs available at: $(pwd)/app.log"
            echo "🆔 Process ID: $(pgrep -f "java -jar.*$(pwd)/app.jar")"
            echo "📅 Completion Time: $(date)"
            echo "========================================="

      # ---------- Build blog_backend ----------
      - name: Build blog_backend
        working-directory: ./blog_backend
        run: mvn clean package -DskipTests

      # ---------- Upload blog_backend JAR ----------
      - name: Upload blog_backend JAR to Oracle Linux
        uses: appleboy/scp-action@v0.1.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: root
          port: 50022
          key: ${{ secrets.SERVER_SSH_KEY }}
          source: "blog_backend/target/*.jar"
          target: "~/blog_backend"
          strip_components: 2  # Remove blog_backend/target/ prefix
          timeout: 180s              # 3 minutes timeout
          command_timeout: 300s      # 5 minutes command timeout
          debug: true                # Enable debug mode
          overwrite: true            # Overwrite existing files

      # ---------- Restart blog_backend Service ----------
      - name: Restart blog_backend Java App
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: root
          port: 50022
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            echo "========================================="
            echo "🚀 BLOG BACKEND SERVICE DEPLOYMENT START"
            echo "========================================="
            echo "📅 Deployment Time: $(date)"
            echo "📂 Working Directory: $(pwd)"
            
            cd ~/blog_backend
            echo "📁 Current directory: $(pwd)"
            
            echo ""
            echo "🔍 STEP 1: Stopping existing blog_backend service..."
            echo "----------------------------------------"
            existing_pids=$(pgrep -f "java -jar .*$(pwd)" || true)
            if [ -n "$existing_pids" ]; then
              echo "Found existing processes: $existing_pids"
              echo "$existing_pids" | while read pid; do
                echo "🛑 Stopping process $pid..."
                kill -15 "$pid" 2>/dev/null || kill -9 "$pid" 2>/dev/null
                sleep 2
                if kill -0 "$pid" 2>/dev/null; then
                  echo "❌ Process $pid still running, force killing..."
                  kill -9 "$pid" 2>/dev/null || true
                else
                  echo "✅ Process $pid stopped successfully"
                fi
              done
              echo "⏳ Waiting 3 seconds for cleanup..."
              sleep 3
            else
              echo "ℹ️  No existing blog_backend processes found"
            fi
            
            echo ""
            echo "🔍 STEP 2: Locating JAR files..."
            echo "----------------------------------------"
            echo "📋 Available JAR files:"
            ls -la *.jar 2>/dev/null || echo "❌ No JAR files found"
            
            latest_jar=$(ls -t *.jar 2>/dev/null | head -n 1)
            if [ -z "$latest_jar" ]; then
              echo "❌ ERROR: No JAR file found in $(pwd)"
              echo "📂 Directory contents:"
              ls -la
              exit 1
            fi
            
            echo "🎯 Selected JAR: $latest_jar"
            echo "📊 JAR file info:"
            ls -lh "$latest_jar"
            
            echo ""
            echo "🔍 STEP 3: Creating symlink..."
            echo "----------------------------------------"
            echo "🔗 Creating symlink: $(pwd)/app.jar -> $(pwd)/$latest_jar"
            ln -sf "$(pwd)/$latest_jar" "$(pwd)/app.jar"
            ls -la app.jar
            
            echo ""
            echo "🔍 STEP 4: Starting blog_backend service..."
            echo "----------------------------------------"
            echo "🚀 Command: java -jar $(pwd)/app.jar"
            echo "📝 Log file: $(pwd)/app.log"
            
            # Clear previous log
            > app.log
            
            # Start the application
            nohup java -jar "$(pwd)/app.jar" > app.log 2>&1 &
            app_pid=$!
            echo "🆔 Started with PID: $app_pid"
            
            echo ""
            echo "🔍 STEP 5: Monitoring startup..."
            echo "----------------------------------------"
            echo "⏳ Waiting for application to start (monitoring for 30 seconds)..."
            
            for i in {1..30}; do
              echo "⏱️  Checking startup progress ($i/30)..."
            
              # Check if process is still running
              if ! kill -0 $app_pid 2>/dev/null; then
                echo "❌ Process died during startup!"
                echo "📋 Last 50 lines of log:"
                tail -n 50 app.log
                exit 1
              fi
            
              # Check for startup indicators in log
              if grep -q "Started.*Application" app.log 2>/dev/null; then
                echo "✅ Application started successfully!"
                break
              elif grep -q "APPLICATION FAILED TO START" app.log 2>/dev/null; then
                echo "❌ Application failed to start!"
                echo "📋 Error logs:"
                tail -n 30 app.log
                exit 1
              elif grep -q "Tomcat started on port" app.log 2>/dev/null; then
                echo "✅ Tomcat server started!"
                break
              fi
            
              sleep 1
            done
            
            echo ""
            echo "🔍 STEP 6: Final verification..."
            echo "----------------------------------------"
            
            # Final process check
            if pgrep -f "java -jar.*$(pwd)/app.jar" > /dev/null; then
              final_pid=$(pgrep -f "java -jar.*$(pwd)/app.jar")
              echo "✅ blog_backend service is running (PID: $final_pid)"
            
              # Show memory usage
              echo "💾 Memory usage:"
              ps -p $final_pid -o pid,ppid,pcpu,pmem,cmd --no-headers || true
            
              # Show recent log entries
              echo ""
              echo "📋 Recent log entries (last 10 lines):"
              tail -n 10 app.log
            
            else
              echo "❌ DEPLOYMENT FAILED: blog_backend service is not running"
              echo "📋 Full log output:"
              cat app.log
              exit 1
            fi
            
            echo ""
            echo "========================================="
            echo "✅ BLOG BACKEND SERVICE DEPLOYED SUCCESSFULLY"
            echo "📝 Full logs available at: $(pwd)/app.log"
            echo "🆔 Process ID: $(pgrep -f "java -jar.*$(pwd)/app.jar")"
            echo "📅 Completion Time: $(date)"
            echo "========================================="
